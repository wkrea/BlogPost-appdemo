name: .NET Core
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main, CICD ]
 
jobs:
  build:
    runs-on: windows-latest
    env:
      config: 'Release'
    defaults:
      run:
        working-directory: BackEnd
 
    steps:
    - uses: actions/checkout@v2
    - name: Instalar .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.401
    - name: Restaurar dependencias
      run: dotnet restore ./App.Api/
    - name: Construir Aplicación
      run: dotnet build --configuration Release --no-restore ./App.Api/App.Api.csproj

    # - name: Elegir \#Build para el PR (if pr)
    #   id: PRNUMBER
    #   if: ${{ github.event_name == 'pull_request' }}
    #   uses: kkak10/pr-number-action@v1.3

    #   # set report file and title 
    # - name: Titulo reporte de Tests
    #   run: | 
    #         if ${{ github.event_name == 'pull_request' }}
    #         then
    #           echo "title=Tests para PR #${{steps.PRNUMBER.outputs.pr}} (${{github.run_number}})" >> $GITHUB_ENV
    #           echo "file_name=TestReport.${{steps.PRNUMBER.outputs.pr}}.${{github.run_number}}.md" >> $GITHUB_ENV
    #         else
    #           echo "title=Tests ${{github.run_number}}" >> $GITHUB_ENV
    #           echo "file_name=TestReport.${{github.run_number}}.md" >> $GITHUB_ENV
    #         fi

    # - name: Ejecutar Tests
    #   run: |
    #     dotnet restore ./App.Test/
    #     dotnet test --no-restore --verbosity normal --no-build --configuration $config \
    #     --logger:"liquid.md;LogFileName=${{github.workspace}}/${{env.file_name}};Title=${{env.title}};" \
    #     ./App.Test/App.Test.csproj

    #     dotnet test --no-restore --verbosity normal --no-build --configuration Release --logger:"liquid.md;LogFileName=test;Title=test #1;" ./App.Test.csproj

    - name: Generate coverage report
      run: |
        cd ./App.Test/
        dotnet test -p:CollectCoverage=true -p:CoverletOutput=TestResults/ -p:CoverletOutputFormat=lcov
    
    - name: Content list
      run: |
        #ls ./
        ls ${{github.workspace}}/BackEnd/App.Test/TestResults
    
    - name: Coveralls
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: ${{github.workspace}}/BackEnd/App.Test/TestResults/coverage.info 
        
        
# # dotnet add package coverlet.msbuild

# name: Aprendiendo con un web API .NET Core

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main, CICD, BackEnd, FrontEnd ]

# jobs:
#   build:
#     # https://dev.to/kurtmkurtm/testing-net-core-apps-with-github-actions-3i76
#     runs-on: ubuntu-latest
#     # use release mode for all steps
#     env:
#       config: 'Release'

#     steps:
#     - name: Obtener Código fuente
#       uses: actions/checkout@v2
#       with:
#         ref: ${{ github.event.pull_request.head.sha }}
        
#     - name: Instalar .NET Core
#       uses: actions/setup-dotnet@v1
#       with:
#         dotnet-version: 3.1.401

#     - name: Restauración de dependencias
#       run: dotnet restore ./BackEnd/App.Api/

#     - name: Compilar
#       run: dotnet build --configuration Release --no-restore ./BackEnd/App.Api/App.Api.csproj

#     - name: Elegir \#Build para el PR (if pr)
#       id: PRNUMBER
#       if: ${{ github.event_name == 'pull_request' }}
#       uses: kkak10/pr-number-action@v1.3

#       # set report file and title 
#     - name: Titulo reporte de Tests
#       run: | 
#             if ${{ github.event_name == 'pull_request' }}
#             then
#               echo "title=Tests para PR #${{steps.PRNUMBER.outputs.pr}} (${{github.run_number}})" >> $GITHUB_ENV
#               echo "file_name=TestReport.${{steps.PRNUMBER.outputs.pr}}.${{github.run_number}}.md" >> $GITHUB_ENV
#             else
#               echo "title=Tests ${{github.run_number}}" >> $GITHUB_ENV
#               echo "file_name=TestReport.${{github.run_number}}.md" >> $GITHUB_ENV
#             fi
#     # run tests with built project
#     - name: Ejecutar Tests PR     
#       run: dotnet test ${{github.workspace}}/BackEnd/App.Test/App.Test.csproj --verbosity normal --no-restore --no-build --configuration $config --logger:"liquid.md;LogFileName=${{env.file_name}};Title=${{env.title}};" 
    
#     - name: Generate coverage report
#       run: |
#         cd ${{github.workspace}}/BackEnd/App.Test/
#         dotnet test -p:CollectCoverage=true -p:CoverletOutput=TestResults/ -p:CoverletOutputFormat=lcov
#         dotnet test /p:CollectCoverage=true /p:CoverletOutput=..\results\coverage /p:MergeWith=..\results\coverage.json /p:CoverletOutputFormat=\"opencover,json\"

#     - name: Publish coverage report to coveralls.io
#       uses: coverallsapp/github-action@master
#       with:
#         github-token: ${{ secrets.GITHUB_TOKEN }}
#         path-to-lcov: ${{github.workspace}}/BackEnd/App.Test/TestResults/coverage.info 

#     - name: Build and deploy package
#       run: |
#         cd ./MyLibrary/
#         dotnet publish -c=Release
#         # deploy

###################################################################################
###################################################################################
###################################################################################
###################################################################################

    # # upload report as build artifact
    # - name: Upload a Build Artifact
    #   uses: actions/upload-artifact@v2
    #   if: ${{always()}}
    #   with:
    #     name: 'Test Run'
    #     path: ${{github.workspace}}/BackEnd/App.Test/TestResults/${{env.file_name}}
    #     # upload report as build artifact
    # - name: Upload a Build Artifact
    #   uses: actions/upload-artifact@v2
    #   if: ${{always()}}
    #   with:
    #     name: 'Test Run'
    #     path: ${{github.workspace}}/BackEnd/App.Test/${{env.file_name}}
    # - name: Upload a Build Artifact
    #   uses: actions/upload-artifact@v2
    #   if: ${{always()}}
    #   with:
    #     name: 'Test Run'
    #     path: ${{github.workspace}}


# # ################################################################################################
# name: Aprendiendo con un web API .NET Core

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main, CICD, BackEnd, FrontEnd]

# jobs:
#   build:
#     # https://dev.to/kurtmkurtm/testing-net-core-apps-with-github-actions-3i76
#     # https://medium.com/android-advance-tips-and-tutorial/github-action-for-unit-testing-57faefc9633
#     # https://dev.to/rickedb/quickstart-with-github-actions-42pi
#     # runs-on: ubuntu-latest
#     runs-on: ${{ matrix.os }}
#     strategy:
#       matrix:

#         include:
#           - os: windows-latest
#             TARGET: x86_64-apple-darwin
#             COMPILER: clang
#             LINKER: clang

#           # - os: macos-latest
#           #   TARGET: x86_64-apple-darwin
#           #   COMPILER: clang
#           #   LINKER: clang

#           # - os: ubuntu-latest
#           #   TARGET: armv7-unknown-linux-musleabihf
#           #   COMPILER: arm-linux-gnueabihf-gcc-5
#           #   LINKER: gcc-5-arm-linux-gnueabihf

#           # - os: ubuntu-latest
#           #   TARGET: x86_64-unknown-linux-musl
#           #   COMPILER: gcc
#           #   LINKER: gcc

#     # use release mode for all steps
#     env:
#       config: 'Release'

#     steps:
#     - name: Obtener Código fuente
#       uses: actions/checkout@v2
#       with:
#         ref: ${{ github.event.pull_request.head.sha }}
#     - run: echo ${{matrix.TARGET}}
      
#     - name: Instalar .NET Core
#       uses: actions/setup-dotnet@v1
#       with:
#         dotnet-version: 3.1.401

#     - name: Restauración de dependencias
#       run: dotnet restore ./BackEnd/App.Api/

#     - name: Compilar
#       run: dotnet build --configuration Release --no-restore ./BackEnd/App.Api/App.Api.csproj

#     - name: Elegir \#Build para el PR (if pr)
#       id: PRNUMBER
#       if: ${{ github.event_name == 'pull_request' }}
#       uses: kkak10/pr-number-action@v1.3
      
#       # set report file and title 
#     - name: Titulo reporte de Tests
#       run: | 
#             if [ "$RUNNER_OS" == "Linux" ]; then
#               if ${{ github.event_name == 'pull_request' }}
#               then
#                 echo "title=Tests para PR #${{steps.PRNUMBER.outputs.pr}} (${{github.run_number}})" >> $GITHUB_ENV
#                 echo "file_name=TestReport.${{steps.PRNUMBER.outputs.pr}}.${{github.run_number}}.md" >> $GITHUB_ENV
#               else
#                 echo "title=Tests ${{github.run_number}}" >> $GITHUB_ENV
#                 echo "file_name=TestReport.${{github.run_number}}.md" >> $GITHUB_ENV
#               fi
#             elif [ "$RUNNER_OS" == "Windows" ]; then
#                 if ( github.event_name -eq 'pull_request' )
#                   echo "title=Tests para PR #${{steps.PRNUMBER.outputs.pr}} (${{github.run_number}})" >> $GITHUB_ENV
#                   echo "file_name=TestReport.${{steps.PRNUMBER.outputs.pr}}.${{github.run_number}}.md" >> $GITHUB_ENV
#                 else
#                   echo "title=Tests ${{github.run_number}}" >> $GITHUB_ENV
#                   echo "file_name=TestReport.${{github.run_number}}.md" >> $GITHUB_ENV
#                 fi
#             else
#               echo "$RUNNER_OS not supported"
#               exit 1
#             fi

      
#       # run tests with built project
#     - name: Ejecutar Tests PR      
#       run: dotnet restore ./BackEnd/App.Test/
#       run: dotnet test ./BackEnd/App.Test/App.Test.csproj --no-restore --no-build --configuration $config --logger:"liquid.md;LogFileName=${{env.file_name}};Title=${{env.title}};" 

#          # upload report as build artifact
#     - name: Upload a Build Artifact
#       uses: actions/upload-artifact@v2
#       if: ${{always()}}
#       with:
#         name: 'Test Run'
#         path: ./BackEnd/App.Test/TestResults/${{env.file_name}}
      
#       # add report as PR comment (if PR)
#     - name: comment PR
#       uses: machine-learning-apps/pr-comment@master
#       if: ${{ github.event_name == 'pull_request' }}
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#         path: ${{github.workspace}}/BackEnd/App.Test/TestResults/${{env.file_name}}


# # ################################################################################################


# name: Aprendiendo con un web API .NET Core

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main, CICD, BackEnd, FrontEnd]

# jobs:
#   build:
#     # https://dev.to/kurtmkurtm/testing-net-core-apps-with-github-actions-3i76
#     runs-on: ubuntu-latest
#     # use release mode for all steps
#     env:
#       config: 'Release'

#     steps:
#     - name: Obtener Código fuente
#       uses: actions/checkout@v2
#       with:
#         ref: ${{ github.event.pull_request.head.sha }}

#     - name: Instalar .NET Core
#       uses: actions/setup-dotnet@v1
#       with:
#         dotnet-version: 3.1.401

#     - name: Restauración de dependencias
#       run: dotnet restore ./BackEnd/App.Api/

#     - name: Compilar
#       run: dotnet build --configuration Release --no-restore ./BackEnd/App.Api/App.Api.csproj

#     - name: Elegir \#Build para el PR (if pr)
#       id: PRNUMBER
#       if: ${{ github.event_name == 'pull_request' }}
#       uses: kkak10/pr-number-action@v1.3
      
#       # set report file and title 
#     - name: Titulo reporte de Tests
#       run: | 
#             if ${{ github.event_name == 'pull_request' }}
#             then
#               echo "title=Tests para PR #${{steps.PRNUMBER.outputs.pr}} (${{github.run_number}})" >> $GITHUB_ENV
#               echo "file_name=TestReport.${{steps.PRNUMBER.outputs.pr}}.${{github.run_number}}.md" >> $GITHUB_ENV
#             else
#               echo "title=Tests ${{github.run_number}}" >> $GITHUB_ENV
#               echo "file_name=TestReport.${{github.run_number}}.md" >> $GITHUB_ENV
#             fi
      
#       # run tests with built project
#     - name: Ejecutar Tests PR      
#       run: dotnet test ./BackEnd/App.Test/App.Test.csproj --no-restore --no-build --configuration $config --logger:"liquid.md;LogFileName=${{env.file_name}};Title=${{env.title}};" 

#          # upload report as build artifact
#     - name: Upload a Build Artifact
#       uses: actions/upload-artifact@v2
#       if: ${{always()}}
#       with:
#         name: 'Test Run'
#         path: ./BackEnd/App.Test/TestResults/${{env.file_name}}
      
#       # add report as PR comment (if PR)
#     - name: comment PR
#       uses: machine-learning-apps/pr-comment@master
#       if: ${{ github.event_name == 'pull_request' }}
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#         path: ${{github.workspace}}/BackEnd/App.Test/TestResults/${{env.file_name}}




#       # set report file and title 
#     - name: Titulo reporte de Tests
#       run: | 
#             if ${{ github.event_name == 'pull_request' }}
#             then
#               echo "title=Tests para PR #${{steps.PRNUMBER.outputs.pr}} (${{github.run_number}})" >> $GITHUB_ENV
#               echo "file_name=TestReport.${{steps.PRNUMBER.outputs.pr}}.${{github.run_number}}.md" >> $GITHUB_ENV
#             else
#               echo "title=Tests ${{github.run_number}}" >> $GITHUB_ENV
#               echo "file_name=TestReport.${{github.run_number}}.md" >> $GITHUB_ENV
#             fi



# # upload report as build artifact
#     - name: Upload a Build Artifact
#       uses: actions/upload-artifact@v2
#       if: ${{always()}}
#       with:
#         name: 'Test Run'
#         path: ${{github.workspace}}/BackEnd/App.Test/TestResults/${{env.file_name}}
#         # upload report as build artifact
#     - name: Upload a Build Artifact
#       uses: actions/upload-artifact@v2
#       if: ${{always()}}
#       with:
#         name: 'Test Run'
#         path: ${{github.workspace}}/BackEnd/App.Test/${{env.file_name}}
#     - name: Upload a Build Artifact
#       uses: actions/upload-artifact@v2
#       if: ${{always()}}
#       with:
#         name: 'Test Run'
#         path: ${{github.workspace}}
